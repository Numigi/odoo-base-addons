# Â© 2021 - today Numigi (tm) and all its contributors (https://bit.ly/numigiens)
# License LGPL-3.0 or later (http://www.gnu.org/licenses/lgpl).

import requests
from odoo import api, models


class Users(models.Model):

    _inherit = "res.users"

    @api.model
    def _auth_oauth_rpc(self, endpoint, access_token):
        if _is_microsoft_endpoint(endpoint):
            return self._auth_oauth_rpc_microsoft(endpoint, access_token)
        else:
            return super()._auth_oauth_rpc(endpoint, access_token)

    def _auth_oauth_rpc_microsoft(self, endpoint, access_token):
        headers = {"Authorization": "Bearer {}".format(access_token)}
        response = requests.get(endpoint, headers=headers)
        return response.json()

    @api.model
    def _auth_oauth_validate(self, provider, access_token):
        validation = super()._auth_oauth_validate(provider, access_token)

        provider_obj = self.env["auth.oauth.provider"].browse(provider)
        if _is_microsoft_endpoint(provider_obj.auth_endpoint):
            email = validation.get("email") or validation["sub"]
            validation["user_id"] = email

            self._update_existing_microsoft_user(provider, email)

        return validation

    def _update_existing_microsoft_user(self, provider, email):
        """Update an existing user that matches the provided microsoft email.

        When a user logs-in for the first time with an Oauth provider,
        Odoo does not try to find an existing user that matches the provided email.

        It will only use an existing user if this user was invited by email
        (using a token generated by Odoo).

        This method finds an existing user who's email matches the email
        from the provided openid payload.

        In case this user exists, it will be updated so that Odoo uses this user
        instead of creating a duplicate user.
        """
        user = self._find_microsoft_user(provider, email)
        if user:
            user.write(
                {
                    "oauth_provider_id": provider,
                    "oauth_uid": email,
                }
            )

    def _find_microsoft_user(self, provider, email):
        user = self.search(
            [("oauth_provider_id", "=", provider), ("oauth_uid", "=", email)], limit=1
        )
        if user:
            return user

        return self.search([("login", "=", email)], limit=1)


def _is_microsoft_endpoint(endpoint):
    return "microsoft" in endpoint
